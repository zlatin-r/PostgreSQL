Database Programmability
Functions
Създаваме си наши функции подобно на view-та
Създаваме функцията
Ф-цията може да бъде на различни езици: Python, Pascal, plpgsql
Казваме какво връща като тип
Функциите в postgres биват 3 типа
STABLE - това са фунцкиите, които при една и съща таблица връщат един и същ резултат, ф-ция за броя редове
IMMUTABLE - функцията винаги ще връща един и същи резултат, независима от таблици, пример квадрат на число
VOLATILE - това са функциите по-подразбиране, променливи
Дефинирайки функция, като STABLE или IMMUTABLE, може да подобрим нейното бързодействие
Можем да достъпваме променливи чрез $цифра, но не е преопоръчително
Procedures
повечето случаи void фунцкции
execute by CALL
Transactionsx
Дейстивия, които извършваме върху базата и можем да върнем, ако пожелаем
-- Start a transaction
BEGIN;

-- Deduct $100 from Alice's account
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;

-- Add $100 to Bob's account
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;

-- Check Bob's new balance
DECLARE
    bob_balance DECIMAL(20,2);
BEGIN
    SELECT balance INTO bob_balance FROM accounts WHERE account_id = 2;
    IF bob_balance > 1000 THEN
        RAISE NOTICE 'Bob has too much money. Rolling back transaction.';
        ROLLBACK;
        RETURN;
    END IF;
END;
Savepoint Example:
-- Start the transaction
BEGIN;

-- Add some amount
UPDATE accounts SET balance = balance + 50 WHERE id = 1;

-- Create a savepoint
SAVEPOINT my_savepoint;

-- Deduct some amount
UPDATE accounts SET balance = balance - 30 WHERE id = 1;

-- Decide for some reason to rollback to the savepoint
ROLLBACK TO SAVEPOINT my_savepoint;

END;
Trigger
Functions executed Before/After a DELETE/UPDATE/INSERT query
Example:
CREATE OR REPLACE FUNCTION update_last_modified()
RETURNS TRIGGER AS $$
BEGIN
    NEW.last_modified = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_last_modified
BEFORE UPDATE ON products
FOR EACH ROW EXECUTE FUNCTION update_last_modified();
*plpgsql - Procedural Language/PostgreSQL
